`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03.07.2024 05:05:07
// Design Name: 
// Module Name: FIFO_16
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module FIFO_16 (
    input clk,
    input rst,
    input wr_en,
    input rd_en,
    input [15:0] buf_in,
    output reg [15:0] buf_out,
    output reg buf_empty,
    output reg buf_full,
    output reg [6:0] fifo_counter
);

reg [5:0] rd_ptr, wr_ptr;

reg [15:0] buf_mem[63:0];

always @(fifo_counter) begin 
buf_empty = (fifo_counter==0); 
buf_full = (fifo_counter==64);
end

// Counter logic
always @(posedge clk or posedge rst)
begin
    if (rst)
        fifo_counter <= 0;
    else if (wr_en && !buf_full && rd_en && !buf_empty)
        fifo_counter <= fifo_counter;
    else if (wr_en && !buf_full)
        fifo_counter <= fifo_counter + 1;
    else if (rd_en && !buf_empty)
        fifo_counter <= fifo_counter - 1;
end

// Read data logic
always @(posedge clk or posedge rst)
begin
    if (rst)
        buf_out <= 0;
    else if (rd_en && !buf_empty)
        buf_out <= buf_mem[rd_ptr];
end

// Write data logic
always @(posedge clk)
begin
    if (wr_en && !buf_full)
        buf_mem[wr_ptr] <= buf_in;
end

// Pointer logic
always @(posedge clk or posedge rst)
begin
    if (rst)
    begin
        wr_ptr <= 0;
        rd_ptr <= 0;
    end
    else
    begin
        if (wr_en && !buf_full)
            wr_ptr <= wr_ptr + 1;
        if (rd_en && !buf_empty)
            rd_ptr <= rd_ptr + 1;
    end
end

endmodule

